@page "/courses/displayCourse/{courseID}"
@using Json.Patch
@using project.Domain.Models.DBConnections
@using Microsoft.AspNetCore.JsonPatch
@inject CoursesService courseService
@inject NavigationManager navigationManager
@inject IDialogService DialogService
@inject TestsService testService

@if (isBusy)
{
    <MudProgressCircular Color="Color.Success" Indeterminate="true" />
}
else
{
    <MudGrid>
        <MudItem xs="12">
            <MudCard Outlined="true" Class="pa-5">
                <MudText Class="mb-3" Typo=Typo.h3>Kurzus: @course?.Name</MudText>
                @if (Tests.Count() > 0)
                {
                    @foreach (var test in Tests)
                    {
                        <MudCard Outlined="true" Elevation="2" Class="pa-5 mb-4">
                            <MudCardContent>
                                <div class="row">
                                    <div class="col-12">
                                        <MudText Typo=Typo.h6 Class="pl-1">@test.Title</MudText>
                                    </div>
                                    <div class="col-12">
                                        @{
                                            var connectingEntity = test.CourseTests.FirstOrDefault(x => x.CourseID == course.ID);
                                        }
                                        <MudChip Color="Color.Secondary">Létrehozva: @test.CreationTime</MudChip>
                                        <MudChip Color="Color.Primary">Kitöltés maximális ideje: @test.AllowedTakeLength</MudChip>
                                        <MudChip Color="Color.Info">Max pontok: @test.MaxPoints</MudChip>
                                        @if (connectingEntity?.AllowedIPSubnet == "0.0.0.0")
                                        {
                                            <MudChip Color="Color.Warning">Bármilyen IP címmel kitölthető</MudChip>
                                        }
                                        else
                                        {
                                            <MudChip Color="Color.Warning">IP tartomány: @connectingEntity?.AllowedIPSubnet</MudChip>
                                        }

                                        @if (connectingEntity.IsOpen)
                                        {
                                            <MudChip Color="Color.Success">Kitölthető</MudChip>
                                        }
                                        else
                                        {
                                            <MudChip Color="Color.Success">Jelenleg nem kitölthető</MudChip>
                                        }
                                    </div>
                                </div>


                                @if (isTeacher)
                                {
                                    <MudButton Class="mt-3" Variant="Variant.Outlined" StartIcon="@Icons.Filled.DoneAll" Size="Size.Small" Color="Color.Default">Eredmények megtekintése</MudButton>
                                    <MudButton Class="mt-3 ml-2" Variant="Variant.Outlined" StartIcon="@Icons.Filled.EditNote" Size="Size.Small" Color="Color.Default" OnClick="() => EditTest(test, connectingEntity)">Szerkesztés</MudButton>
                                    string btnText = connectingEntity.IsOpen ? "Lezárás" : "Megnyitás";
                                    string btnIcon = !connectingEntity.IsOpen ? Icons.Filled.NotStarted : Icons.Filled.StopCircle;
                                    <MudButton Class="mt-3 ml-2" Variant="Variant.Outlined" StartIcon="@btnIcon" Size="Size.Small" Color="Color.Default" OnClick="() => ToogleTestStatus(test)">@btnText</MudButton>
                                }
                                else
                                {

                                }
                            </MudCardContent>
                        </MudCard>
                    }
                }
            </MudCard>
        </MudItem>
    </MudGrid>



}
@code {
    [Parameter]
    public string courseID { get; set; }
    public Course course { get; set; }
    public bool isBusy { get; set; }
    public bool isTeacher { get; set; } = false;
    public IEnumerable<Test> Tests { get; set; } = new List<Test>();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        isBusy = true;


        courseService.AccessToken = await GetAccessToken();
        testService.AccessToken = await GetAccessToken();
        var state = await authenticationState;
        isTeacher = state.User.FindFirst(ClaimTypes.Role)?.Value == "Teacher";

        course = await courseService.GetCourseAsync(courseID);
        Tests = await testService.GetTestsOfCourse(course.ID);

        isBusy = false;
    }

    private async void ToogleTestStatus(Test test)
    {
        testService.AccessToken = await GetAccessToken();
        if(await testService.ToogleTestStatus(test.ID, course.ID))
        {
            Tests = await testService.GetTestsOfCourse(course.ID);
            StateHasChanged();
        }
    }

    private async Task<string> GetAccessToken()
    {
        var state = await authenticationState;
        if (state.User.Identity == null)
        {
            navigationManager.NavigateTo("/courses");
        }

        return state.User.FindFirst("AccessToken").Value;
    }

    private async void EditTest(Test test, CourseTest connectingEntity)
    {
        var origTest = test.Clone();
        var parameters = new DialogParameters { ["model"] = test, ["connectingEntity"] = connectingEntity};
        var dialog = DialogService.Show<EditTestDialog>("Szerkesztés", parameters);
        if(!(await dialog.Result).Cancelled)
        {
            JsonPatch patch= origTest.CreatePatch(test);
            var t = JsonHelpers.CalculatePatch(origTest, test);
             var patchito = JsonSerializer.Serialize<JsonPatchDocument>(t);
            // var patch = JsonSerializer.Serialize<JsonPatch>(patchObj);
            testService.AccessToken = await GetAccessToken();
            if(await testService.UpdateTestAsync(test.ID, patch))
            {
                Tests = await testService.GetTestsOfCourse(course.ID);
                StateHasChanged();
            }
        }
    }
}
