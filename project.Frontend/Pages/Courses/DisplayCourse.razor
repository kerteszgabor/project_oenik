@page "/courses/displayCourse/{courseID}"
@inject CoursesService courseService
@inject NavigationManager navigationManager
@inject TestsService testService

@if (isBusy)
{
    <MudProgressCircular Color="Color.Success" Indeterminate="true" />
}
else
{
    <MudGrid>
        <MudItem xs="12">
            <MudCard Outlined="true" Class="pa-5">
                <MudText Typo=Typo.h2>@course?.Name</MudText>
                @if (Tests.Count() > 0)
                {
                    @foreach (var test in Tests)
                    {
                        <MudCard Outlined="true" Elevation="2" Class="pa-5">
                            <MudCardContent>
                                <MudText Typo=Typo.h6>@test.Title</MudText>
                                if (isTeacher)
                                {
                                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.DoneAll" Color="Color.Primary">Eredmények megtekintése</MudButton>
                                }
                                else
                                {

                                }
                            </MudCardContent>
                        </MudCard>
                    }
                }
            </MudCard>
        </MudItem>
    </MudGrid>



}
@code {
    [Parameter]
    public string courseID { get; set; }
    public Course course { get; set; }
    public bool isBusy { get; set; }
    public bool isTeacher { get; set; } = false;
    public IEnumerable<Test> Tests { get; set; } = new List<Test>();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        isBusy = true;

        var state = await authenticationState;
        if (state.User.Identity == null)
        {
            navigationManager.NavigateTo("/courses");
        }

        courseService.AccessToken = state.User.FindFirst("AccessToken").Value;
        testService.AccessToken = state.User.FindFirst("AccessToken").Value;
        isTeacher = state.User.FindFirst(ClaimTypes.Role)?.Value == "Teacher";

        course = await courseService.GetCourseAsync(courseID);
        Tests = await testService.GetTestsOfCourse(course.ID);

        isBusy = false;
    }
}
