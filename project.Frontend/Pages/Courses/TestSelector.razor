@inject CoursesService coursesService
@inject TestsService testService

@if (isBusy)
{
    <MudProgressCircular Color="Color.Success" Indeterminate="true" />
}
else
{
<MudList Clickable="true">
        <MudListSubheader>
            Itt láthatod a saját tesztjeidet, kurzusonként rendezve.
        </MudListSubheader>
        @foreach(var course in courses)
        {
            <MudListItem Icon="@Icons.Material.Filled.Send" Text="@course.Name" InitiallyExpanded="false" ExpandedChanged="() => GetTestsOfCourse(course)">
                <NestedList>
                @foreach(var test in tests)
                {
                    <MudListItem Icon="@Icons.Material.Filled.StarRate">
                    test.Name
                    </MudListItem>
                }
            </NestedList>
            </MudListItem>
        }
    </MudList>
}
@code {
    bool isBusy = true;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    List<Course> courses = new List<Course>();
    List<Test> tests = new List<Test>();

    async Task GetCoursesAsync()
    {
        isBusy = true;

        var userState = authenticationState.Result;
        coursesService.AccessToken = userState.User.FindFirst("AccessToken").Value;

        IEnumerable<Course> result;

        result = await coursesService.GetOwnCoursesAsync();
        courses = result.ToList();
        isBusy = false;
    }

    async Task GetTestsOfCourse(Course course)
    {
        var userState = authenticationState.Result;
        coursesService.AccessToken = userState.User.FindFirst("AccessToken").Value;
        IEnumerable<Test> result;

        result = await testService.GetTestsOfCourse(course.ID);
        tests = result.ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetCoursesAsync();
    }
}
