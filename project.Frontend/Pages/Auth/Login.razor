@page "/auth/login"
@layout AuthLayout
@inject AuthenticationService authService
@inject NavigationManager navigationManager
@inject ILocalStorageService storageService
@inject AuthenticationStateProvider authenticationStateProvider
@inject ISnackbar Snackbar



<MudText GutterBottom="true" Typo="Typo.h5" Align="Align.Center">Bejelentkezés</MudText>
<EditForm Model="model" OnValidSubmit="LoginUser">
    <AlertMessage Message="@message" MessageType="@messageType" />

    <DataAnnotationsValidator />
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Felhasználónév" Class="mt-3"
                          @bind-Value="model.userName" For="@(() => model.userName)" />
            <MudTextField Label="Jelszó" Class="mt-3"
                          @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
        </MudCardContent>
        <MudCardActions>
            <MudGrid>
                <MudItem xs="12">
                    <MudButton Disabled="isBusy" ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled" Color="Color.Primary"
                               Class="d-flex align-center justify-center mud-width-full py-1">
                        Bejelentkezés
                    </MudButton>
                </MudItem>
                <MudItem xs="12">
                    <MudButton Disabled="isBusy" ButtonType="ButtonType.Button"
                               Variant="Variant.Filled" Color="Color.Secondary"
                               Class="d-flex align-center justify-center mud-width-full py-1" OnClick="GoToRegister">
                        Regisztráció
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    LoginRequest model = new LoginRequest();

    bool isBusy = false;
    string message = string.Empty;
    AlertMessageType messageType = AlertMessageType.Success;



    public async Task LoginUser()
    {
        isBusy = true;

        try
        {
            var result = await authService.LoginUserAsync(model);
            message = "Login successful";
            messageType = AlertMessageType.Success;

            //var userInfo = new ClientUserInfo()
            //{
            //    AccessToken = result.AccessToken,
            //    ID = result.ID,
            //    FirstName = 

            //};

            result.Expiration = result.Expiration.AddHours(1);
            await storageService.SetItemAsync("User", result);
            await authenticationStateProvider.GetAuthenticationStateAsync();
            Snackbar.Add($"Üdv {result.Username}", Severity.Success);
            navigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            messageType = AlertMessageType.Error;
            // message = result.Errors.FirstOrDefault() ?? "Something went wrong. Please try again!";
            Snackbar.Add("Hibás felhasználónév vagy jelszó!", Severity.Error);
            model = new LoginRequest();
        }
        finally
        {
            isBusy = false;
        }
    }

    void GoToRegister()
    {
        navigationManager.NavigateTo("/auth/register");
    }
}
