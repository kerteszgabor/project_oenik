@page "/auth/register"
@layout AuthLayout
@inject AuthenticationService authService
@inject NavigationManager navigationManager



<MudText GutterBottom="true" Typo="Typo.h5" Align="Align.Center">Create a new account</MudText>
<EditForm Model="model" OnValidSubmit="RegisterUser">
    @*<AlertMessage Message="@message" MessageType="@messageType" />*@
    <DataAnnotationsValidator />
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Email" Class="mt-3"
                          @bind-Value="model.Email" For="@(() => model.Email)" />
            <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                          @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
        </MudCardContent>
        <MudCardActions>
            <MudGrid>
                <MudItem xs="12">
                    <MudButton 
                               Disabled="isBusy" ButtonType="ButtonType.Submit" 
                               Variant="Variant.Filled" Color="Color.Primary" 
                               Class="d-flex align-center justify-center mud-width-full py-1">
                    Register
                    </MudButton>
                </MudItem>
                <MudItem xs="12">
                    <MudButton Disabled="isBusy" ButtonType="ButtonType.Button"
                               Variant="Variant.Filled" Color="Color.Secondary"
                               Class="d-flex align-center justify-center mud-width-full py-1" OnClick="GoToLogin">
                        Login
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    RegisterRequest model = new RegisterRequest();

    bool isBusy = false;
    string message = string.Empty;
    AlertMessageType messageType = AlertMessageType.Success;

    public async Task RegisterUser()
    {
        isBusy = true;

        var result = await authService.RegisterUserAsync(model);
        //if (result.IsSucceded)
        //{
        //    message = "User successfully created";
        //    messageType = Models.AlertMessageType.Success;
        //}
        //else
        //{
        //    messageType = Models.AlertMessageType.Error;
        //    message = result.Errors.FirstOrDefault() ?? "Something went wrong. Please try again!";
        //}

        isBusy = false;
    }

    void GoToLogin()
    {
        navigationManager.NavigateTo("/auth/login");
    }
}
