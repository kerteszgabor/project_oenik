@inject IDialogService DialogService
@inject QuestionsService questionService
@attribute [Authorize]



@if (isBusy)
{
    <MudProgressCircular Color="Color.Success" Indeterminate="true" />
}
else
{
    <MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.Small">
        <MudItem xs="12" Class="mb-2">
            <MudPaper Class="d-flex flex-row py-2 px-1">
                <MudTextField Class="pa-2 mx-2" @bind-Value="Query" Label="Keresett címke" Variant="Variant.Outlined"></MudTextField>
                <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Primary" OnClick="async () => await GetQuestionsAsync()">Keresés</MudButton>
            </MudPaper>
        </MudItem>
        <MudList Clickable="false">
            @foreach (var question in questions)
            {
                <MudListItem Icon="@Icons.Filled.QuestionAnswer" IconColor="Color.Tertiary">
                    @question.Title
                     <MudChip Color="Color.Primary" Icon="@Icons.Filled.CropFree" OnClick="() => OpenQuestion(question)">Megnyitás</MudChip>
                    <MudChip Icon="@Icons.Filled.Delete" OnClick="() => DeleteQuestion(question.ID)">Törlés</MudChip>
                    </MudListItem>
                <MudDivider />
            }

        </MudList>
    </MudContainer>
    // <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Class="mt-5" OnClick="AddUser" />
}



@code {
    [Parameter]
    public int? PageNumber { get; set; }

    [Parameter]
    public string Query { get; set; } = String.Empty;

    bool isBusy = false;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    List<Question> questions = new List<Question>();

    async Task GetQuestionsAsync()
    {
        isBusy = true;

        var userState = authenticationState.Result;
        questionService.AccessToken = userState.User.FindFirst("AccessToken").Value;

        IEnumerable<Question> result;

        if (string.IsNullOrWhiteSpace(Query))
        {
            result = await questionService.GetAllQuestionsAsync();
        }
        else
        {
            result = await questionService.GetLabelledQuestions(Query);
        }

        questions = result.ToList();

        isBusy = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await GetQuestionsAsync();
    }

    private async void DeleteQuestion(string id)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Biztosan ki akarod törölni ezt a kérdést?");
        parameters.Add("ButtonText", "Törlés");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var result = await DialogService.Show<Dialog>("Törlés", parameters, options).Result;
        if (!result.Cancelled)
        {
            var userState = authenticationState.Result;
            questionService.AccessToken = userState.User.FindFirst("AccessToken").Value;

            var deleteResult = await questionService.DeleteQuestionAsync(id);
            if (deleteResult)
            {
                await GetQuestionsAsync();
                StateHasChanged();
            }
        }
    }

    private async Task OpenQuestion(Question question)
    {
        var parameters = new DialogParameters { ["question"]=question};

        var dialog = DialogService.Show<QuestionDialog>("Kérdés megnyitása", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            
        }
    }
}
