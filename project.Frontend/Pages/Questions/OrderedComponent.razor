<MudList ondragover="event.preventDefault();"
         ondragstart="event.dataTransfer.setData('', event.target.id);">
    @foreach (var item in Models.OrderBy(x => x.Order))
    {
<MudListItem @ondrop="()=>HandleDrop(item)" @key="item" Icon="@Icons.Filled.ArrowForwardIos" IconColor="Color.Primary">
    <div @ondragleave="@(()=> {item.IsDragOver = false;})"
         @ondragenter="@(()=>{item.IsDragOver = true;})"
         style="@(item.IsDragOver?"border-style: solid none none none; border-color:red;":"")"
         @ondragstart="() => draggingModel = item"
         @ondragend="()=> draggingModel = null" draggable="true">
        @item.Name
    </div>
</MudListItem>
    <MudDivider></MudDivider>
        
    }
</MudList>

@code
{
    public List<Model> Models { get; set; } = new();

    private List<string> elements = new();
    [CascadingParameter]
    public List<string> Elements 
    { 
        get { return elements; }
        set { elements = value;  DisplayElements(); } 
    }

    [Parameter]
    public EventCallback<List<string>> OnOrderChanged { get; set; }

    public class Model
    {
        public int Order { get; set; }
        public string Name { get; set; } = "";
        public bool IsDragOver { get; set; }
    }

    protected override void OnInitialized()
    {
        DisplayElements();
        base.OnInitialized();
    }

    private void DisplayElements()
    {
        Models.Clear();
        for (var i = 0; i < Elements.Count; i++)
        {
            Models.Add(new Model() { Order = i, Name = Elements[i]});
        }
    }

    private void HandleDrop(Model landingModel)
    {
        if (draggingModel is null)
        {
            return;
        }
        int origOrder = landingModel.Order;
        Models.Where(x => x.Order >= landingModel.Order).ToList().ForEach(x => x.Order++);
        draggingModel.Order = origOrder;
        int i = 0;
        var orderedModels = Models.OrderBy(x => x.Order).ToList();
        foreach (var model in orderedModels)
        {
            model.Order = i++;
            model.IsDragOver = false;
        }

        elements = orderedModels.OrderBy(x => x.Order).Select(x => x.Name).ToList();
        OnOrderChanged.InvokeAsync(elements);
    }

    private Model? draggingModel;
}