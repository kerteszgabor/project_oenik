@page "/questions/answer/Order/{testID}/{questionID}"
@inherits PageBase
@using project.Domain.DTO.TestResults
@using project.Domain.DTO.Tests
@inject TestsService testService
@inject QuestionsService questionService
@inject ISnackbar Snackbar
@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudPaper Class="pa-4 sm-6">
        <MudText Typo="Typo.h4">@model.Title</MudText>
        <EditForm Class="mt-3" Model="@model" OnValidSubmit="Submit">
            <MudText Typo="Typo.subtitle1">Helyezd a megfelelő sorrendbe az alábbiakat:</MudText>
            <div class="col-sm-6 d-flex align-center justify-content-center mb-2">
                <div class="d-flex align-center justify-space-between mt-6">
                    <CascadingValue Value=@Elements>
                        <OrderedComponent @ref="orderedComponent" OnOrderChanged="HandleOnChangedEvent"></OrderedComponent>
                    </CascadingValue>
                </div>
            </div>
            <div class="d-flex align-center justify-space-between mt-6">
                <MudButton Disabled="@isBusy" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">@buttonText</MudButton>
            </div>
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    private List<Question> questions;

    [Parameter]
    public string testID { get; set; }
    [Parameter]
    public string questionID { get; set; }

    private Question model = new Question();
    private AnswerDTO answer = new AnswerDTO();
    private bool isBusy;
    private string buttonText;

    List<string> Elements = new List<string>();
    OrderedComponent orderedComponent { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    protected async override Task OnInitializedAsync()
    {
        questions = await storageService.GetItemAsync<List<Question>>("remainingQuestions");
        model = questions?.FirstOrDefault();
        questions.RemoveAt(0);
        buttonText = questions.Count == 0 ? "Teszt befejezése" : "Tovább";
        answer.CorrectManually = false;
        answer.QuestionID = model.ID;
        answer.TestID = testID;
        var userState = authenticationState.Result;
        questionService.AccessToken = userState.User.FindFirst("AccessToken").Value;
        var answerJson = (await questionService.GetQuestionAsync(model.ID)).CorrectAnswer;
        Elements = JsonHelpers<string>.DeserializeJson(answerJson).OrderBy(x => Guid.NewGuid()).ToList();
    }

    private void HandleOnChangedEvent(List<string> orderedElements)
    {
        Elements = orderedElements;
    }

    async void Submit()
    {
        isBusy = true;

        var userState = authenticationState.Result;
        testService.AccessToken = userState.User.FindFirst("AccessToken").Value;
        answer.AnswerText = JsonHelpers.SerializeList(Elements);
        if (await testService.SubmitAnswer(answer))
        {
            Snackbar.Add("Kérdés sikeresen elküldve!", Severity.Success);
        }
        else
        {
            Snackbar.Add("Hiba történt!", Severity.Error);
        }

        await storageService.RemoveItemAsync("remainingQuestions");
        if (questions.Count > 0)
        {
            await storageService.SetItemAsync("remainingQuestions", questions);
            _navManager.NavigateTo($"/questions/answer/{questions.First().QuestionType}/{testID}/{questions.First().ID}", true);
        }
        else
        {
            var courseID = await storageService.GetItemAsync<string>("currentCourseID");
            await testService.StopTestCompletion(testID, courseID);
            await storageService.RemoveItemAsync("currentCourseID");
            _navManager.NavigateTo($"/courses/displayCourse/{courseID}");
        }

        isBusy = false;
    }
}

