@page "/questions/answer/fillin/{testID}/{questionID}"
@inherits PageBase
@using System.Text.RegularExpressions
@using project.Domain.DTO.TestResults
@using project.Domain.DTO.Tests
@inject TestsService testService
@inject ISnackbar Snackbar
@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudPaper Class="pa-4 sm-6">
        <MudText Typo="Typo.h4">Kitöltős kérdés</MudText>
        <MudText Typo="Typo.subtitle1">Írd be az üres helyekre a helyesnek vélt válaszokat!</MudText>
        <EditForm Class="mt-3" Model="@model" OnValidSubmit="Submit">
            <DataAnnotationsValidator />
            @if (model?.Text is not null)
            {
                var elements = model.Text.Split("***").ToList();
                @foreach (var item in elements)
                {
                    foreach (var ch in item)
                    {
                        if (ch == '*')
                        {
                          int idx = elements.FindIndex(x => x == item) - 1;
                          <div class="col-2">
                            <DynamicComponent  @ref="answers[idx]" Type="@typeof(MudTextField<string>)" />
                          </div>
                        }
                        else
                        {
                            @ch;
                        }
                    }
                }
            }
            <div class="d-flex align-center justify-space-between mt-6">
                <MudButton Disabled="@isBusy" ButtonType="ButtonType.Submit" OnClick="() => StateHasChanged()" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">@buttonText</MudButton>
            </div>
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    private List<Question> questions;

    [Parameter]
    public string testID { get; set; }
    [Parameter]
    public string questionID { get; set; }

    private Question model = new Question();
    private AnswerDTO answer = new AnswerDTO();
    private bool isBusy;
    private string buttonText;
    private List<DynamicComponent> answers = new List<DynamicComponent>();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    protected async override Task OnInitializedAsync()
    {
        questions = await storageService.GetItemAsync<List<Question>>("remainingQuestions");
        model = questions?.FirstOrDefault();
        questions.RemoveAt(0);
        buttonText = questions.Count == 0 ? "Teszt befejezése" : "Tovább";
        answer.CorrectManually = false;
        answer.QuestionID = model.ID;
        answer.TestID = testID;
        int answerCount = model.Text.Split("****").Count() - 1;
        for(int i = 0; i < answerCount; i++)
        {
            answers.Add(new DynamicComponent());
        }
    }

    async void Submit()
    {
        isBusy = true;

        var userState = authenticationState.Result;
        testService.AccessToken = userState.User.FindFirst("AccessToken").Value;
        answer.AnswerText = JsonHelpers.SerializeList(answers.Select(x => (x.Instance as MudTextField<string>).Text).ToList());
        if (await testService.SubmitAnswer(answer))
        {
            Snackbar.Add("Kérdés sikeresen elküldve!", Severity.Success);
        }
        else
        {
            Snackbar.Add("Hiba történt!", Severity.Error);
        }

        await storageService.RemoveItemAsync("remainingQuestions");
        if (questions.Count > 0)
        {
            await storageService.SetItemAsync("remainingQuestions", questions);
            _navManager.NavigateTo($"/questions/answer/{questions.First().QuestionType}/{testID}/{questions.First().ID}", true);
        }
        else
        {
            var courseID = await storageService.GetItemAsync<string>("currentCourseID");
            await testService.StopTestCompletion(testID, courseID);
            await storageService.RemoveItemAsync("currentCourseID");
            _navManager.NavigateTo($"/courses/displayCourse/{courseID}");
        }

        isBusy = false;
    }
}

