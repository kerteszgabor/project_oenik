@page "/questions/answer/Text/{testID}"
@inherits PageBase
@using project.Domain.DTO.TestResults
@using project.Domain.DTO.Tests
@inject TestsService testService
@inject ISnackbar Snackbar
@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudPaper Class="pa-4 sm-6">
        <MudText Typo="Typo.h4">@model.Title</MudText>
        <MudText Typo="Typo.subtitle1">@testID</MudText>
        <EditForm Class="mt-3" Model="@model" OnValidSubmit="Submit">
            <MudText @bind-Value="model.Text" Label="A kérdés szövege" Variant="Variant.Outlined" Lines="3" />
            <MudTextField @bind-Value="answer.AnswerText" T="string" Label="Helyes válasz" Variant="Variant.Outlined" Lines="3" />
            <div class="d-flex align-center justify-space-between mt-6">
                <MudButton Disabled="@isBusy" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Hozzáadás</MudButton>
            </div>
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    private List<Question> questions;

    [Parameter]
    public string testID { get; set; }

    private Question model;
    private AnswerDTO answer = new AnswerDTO();
    private bool isBusy;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    protected async override Task OnInitializedAsync()
    {
        questions = await storageService.GetItemAsync<List<Question>>("remainingQuestions");
        model = questions?.FirstOrDefault();
        questions.RemoveAt(0);
        answer.CorrectManually = false;
        answer.QuestionID = model.ID;
        answer.TestID = testID;
    }

    async void Submit()
    {
        isBusy = true;

        var userState = authenticationState.Result;
        testService.AccessToken = userState.User.FindFirst("AccessToken").Value;
        if (await testService.SubmitAnswer(answer))
        {
            Snackbar.Add("Kérdés sikeresen elküldve!", Severity.Success);
        }
        else
        {
            Snackbar.Add("Hiba történt!", Severity.Error);
        }

        await storageService.RemoveItemAsync("remainingQuestions");
        if(questions.Count > 0)
        {
            await storageService.SetItemAsync("remainingQuestions", questions);
            _navManager.NavigateTo($"/questions/answer/{questions.First().QuestionType}/{testID}");
        }
        else
        {
             _navManager.NavigateTo(_pageState.previousPages.Where(x => x.Contains("displayCourse")).LastOrDefault());
        }

        isBusy = false;
    }
}

