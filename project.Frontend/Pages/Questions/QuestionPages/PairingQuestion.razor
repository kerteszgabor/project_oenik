@page "/questions/answer/Pairing/{testID}/{questionID}"
@inherits PageBase
@using project.Domain.DTO.TestResults
@using project.Domain.DTO.Tests
@inject TestsService testService
@inject QuestionsService questionService
@inject ISnackbar Snackbar
@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudGrid Class="mb-5">
        <MudItem xs="12">
            <MudPaper Class="pa-4 sm-6">
                <MudText Typo="Typo.h4">@model.Title</MudText>
                <MudText Typo="Typo.subtitle1">@model.Text</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper>
                <CascadingValue Value=@Elements1>
                    <OrderedComponent @ref="orderedComponent1" OnOrderChanged="HandleOnChangedEvent1"></OrderedComponent>
                </CascadingValue>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper>
                <CascadingValue Value=@Elements2>
                    <OrderedComponent @ref="orderedComponent2" OnOrderChanged="HandleOnChangedEvent2"></OrderedComponent>
                </CascadingValue>
            </MudPaper>
        </MudItem>
            <div class="d-flex align-center justify-space-between mt-6">
                <MudButton Disabled="@isBusy" OnClick="() => Submit()" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">@buttonText</MudButton>
            </div>
    </MudGrid>
</MudContainer>

@code {
    private List<Question> questions;

    [Parameter]
    public string testID { get; set; }
    [Parameter]
    public string questionID { get; set; }

    private Question model = new Question();
    private AnswerDTO answer = new AnswerDTO();
    private bool isBusy;
    private string buttonText;

    List<string> Elements1 = new List<string>();
    List<string> Elements2 = new List<string>();

    OrderedComponent orderedComponent1 { get; set; }
    OrderedComponent orderedComponent2 { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    protected async override Task OnInitializedAsync()
    {
        questions = await storageService.GetItemAsync<List<Question>>("remainingQuestions");
        model = questions?.FirstOrDefault();
        questions.RemoveAt(0);
        buttonText = questions.Count == 0 ? "Teszt befejezése" : "Tovább";
        answer.CorrectManually = false;
        answer.QuestionID = model.ID;
        answer.TestID = testID;
        var userState = authenticationState.Result;
        questionService.AccessToken = userState.User.FindFirst("AccessToken").Value;
        var answerJson = (await questionService.GetQuestionAsync(model.ID)).CorrectAnswer;
        List<Tuple<string, string>> elements = JsonHelpers<Tuple<string, string>>.DeserializeJson(answerJson).ToList();

        foreach (var pair in elements)
        {
            Elements1.Add(pair.Item1);
            Elements2.Add(pair.Item2);
        }
    }

    private void HandleOnChangedEvent1(List<string> orderedElements)
    {
        Elements1 = orderedElements;
    }

    private void HandleOnChangedEvent2(List<string> orderedElements)
    {
        Elements2 = orderedElements;
    }

    async void Submit()
    {
        isBusy = true;

        var userState = authenticationState.Result;
        testService.AccessToken = userState.User.FindFirst("AccessToken").Value;
        List<Tuple<string, string>> mergedElements = new List<Tuple<string, string>>();
        for (int i = 0; i < Elements1.Count; i++)
        {
            mergedElements.Add(Tuple.Create(Elements1[i], Elements2[i]));
        }

        mergedElements = mergedElements.OrderBy(x => x.Item1).ToList();
        answer.AnswerText = JsonHelpers<Tuple<string, string>>.SerializeList(mergedElements);
        if (await testService.SubmitAnswer(answer))
        {
            Snackbar.Add("Kérdés sikeresen elküldve!", Severity.Success);
        }
        else
        {
            Snackbar.Add("Hiba történt!", Severity.Error);
        }

        await storageService.RemoveItemAsync("remainingQuestions");
        if (questions.Count > 0)
        {
            await storageService.SetItemAsync("remainingQuestions", questions);
            _navManager.NavigateTo($"/questions/answer/{questions.First().QuestionType}/{testID}/{questions.First().ID}", true);
        }
        else
        {
            var courseID = await storageService.GetItemAsync<string>("currentCourseID");
            await testService.StopTestCompletion(testID, courseID);
            await storageService.RemoveItemAsync("currentCourseID");
            _navManager.NavigateTo($"/courses/displayCourse/{courseID}");
        }

        isBusy = false;
    }
}

