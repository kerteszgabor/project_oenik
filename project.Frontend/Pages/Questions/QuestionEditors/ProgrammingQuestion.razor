@page "/questions/newQuestion/ProgrammingQuestion"
@inherits PageBase

@using project.Domain.DTO.ClassReport
@using project.Domain.DTO.Tests
@inject QuestionsService questionService
@inject ISnackbar Snackbar
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Teacher")]

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudGrid Justify="Justify.FlexStart">
        <MudItem md="8">
            <MudPaper Class="pa-4 sm-6">
                <MudText Typo="Typo.h5">Új programozási feladat hozzáadása</MudText>
                <EditForm Class="mt-3" Model="@model" OnValidSubmit="Submit">
                    <DataAnnotationsValidator />
                    <MudTextField For="@(() => model.Text)" @bind-Value="model.Text" T="string" Label="A kérdés szövege" Variant="Variant.Outlined" Lines="3" />
                    <MudTextField  @bind-Value="disallowedWords" T="string" HelperText="Vesszővel elválasztva" Label="Tiltani kívánt kifejezések" Variant="Variant.Outlined" />
                    <MudTextField  @bind-Value="requiredWords" T="string" HelperText="Vesszővel elválasztva" Label="Várt kifejezések" Variant="Variant.Outlined" />

                    <MudNumericField For="@(() => model.MaxPoints)" @bind-Value="model.MaxPoints" Label="Pontok száma" Format="F1" Variant="Variant.Outlined" />
                    <div class="d-flex align-center justify-space-between mt-6">
                        <MudCheckBox @bind-Checked="@ChipsEnabled" T="bool" Class="ml-n2" Label="Kérdés megosztása" />
                        <MudCheckBox For="@(() => model.CorrectManually)" @bind-Checked="@model.CorrectManually" T="bool" Class="ml-n2" Label="Kézzel javítandó" />
                        <MudButton Disabled="@isBusy" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Hozzáadás</MudButton>
                    </div>
                    @if (ChipsEnabled)
                    {
                        <div class="d-flex align-center justify-space-between mt-6">
                            <MudTextField @bind-Value="newLabel" Label="Új címke neve" Variant="Variant.Text"></MudTextField>
                            <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="() => AddLabel()"></MudIconButton>
                        </div>

                        <MudChipSet AllClosable="true" OnClose="Closed">
                            @foreach (var value in labels)
                            {
                                <MudChip Color="Color.Primary" Text="@value.LabelText"></MudChip>
                            }
                        </MudChipSet>
                    }
                </EditForm>
            </MudPaper>
        </MudItem>
        <MudItem md="4">
            <MudCard Class="pa-4 sm-6">
                <MudText Class="mb-3" Typo="Typo.h5">Eddig kért metódusok</MudText>
                <MudList Clickable="false">
                    @foreach (var item in model.Methods)
                    {
                        <MudListItem>
                            <MudText Typo="Typo.body1">@item.MethodName</MudText>
                            <MudChip Icon="@Icons.Filled.Delete" OnClick="() => model.Methods.Remove(item)">Törlés</MudChip>
                        </MudListItem>
                        <MudDivider />
                    }
                </MudList>
            </MudCard>
        </MudItem>
        <MudItem>
            @if (showMethodAdder)
            {
                <AddMethodComponent OnAdd="HandleMethodAdded" @ref="addComponent" />
            }
        </MudItem>
    </MudGrid>
</MudContainer>
<MudFab Class="mt-5" OnClick="() => showMethodAdder = !showMethodAdder" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Label="Új metódusellenőrzés hozzáadása" />

@code {
    private ProgQuestionDTO model = new ProgQuestionDTO() { Methods = new List<MethodInfoData>() };
    private bool chipsEnabled;
    private bool isBusy;
    private bool showMethodAdder = false;
    private string newLabel;
    private string disallowedWords;
    private string requiredWords;
    List<LabelDTO> labels = new List<LabelDTO>();
    private AddMethodComponent addComponent;
    // List<MethodInfoData> methods = new List<MethodInfoData>();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    bool ChipsEnabled { get { return chipsEnabled; } set { chipsEnabled = value; labels = new List<LabelDTO>(); StateHasChanged(); } }

    public void AddLabel()
    {
        labels.Add(new LabelDTO() { LabelText = newLabel });
        newLabel = "";
    }

    public void Closed(MudChip chip) => labels.Remove(labels.FirstOrDefault(x => x.LabelText == chip.Text));

    void HandleMethodAdded(MethodInfoData method)
    {
        model.Methods.Add(method);
        showMethodAdder = false;
        addComponent = new AddMethodComponent();
    }

    async void Submit()
    {
        isBusy = true;
        if (labels.Count > 0)
        {
            model.Labels = labels;
        }

        model.QuestionType = "ProgrammingQuestion";
        model.IsShared = chipsEnabled;

        if (!String.IsNullOrWhiteSpace(requiredWords))
        {
            var words = requiredWords.Split(',').ToList();
            words.ForEach(x => x = x.Trim());
            model.RequiredWords = words;
        }

        if (!String.IsNullOrWhiteSpace(disallowedWords))
        {
            var words = disallowedWords.Split(',').ToList();
            words.ForEach(x => x = x.Trim());
            model.DisallowedWords = words;
        }

        var userState = authenticationState.Result;
        questionService.AccessToken = userState.User.FindFirst("AccessToken").Value;
        if (await questionService.AddQuestionAsync(model))
        {
            Snackbar.Add("Kérdés sikeresen hozzáadva!", Severity.Success);
            _navManager.NavigateTo(_pageState.PreviousPage());
        }
        else
        {
            Snackbar.Add("Hiba történt!", Severity.Success);
            isBusy = false;
        }
    }
}

