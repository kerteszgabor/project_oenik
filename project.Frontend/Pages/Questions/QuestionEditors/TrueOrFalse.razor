@page "/questions/newQuestion/TrueOrFalse"
@inherits PageBase

@using project.Domain.DTO.Tests
@using project.Client.Pages.Questions.QuestionEditors.HelperComponents
@inject QuestionsService questionService
@inject ISnackbar Snackbar
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Teacher")]

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudPaper Class="pa-4 sm-6">
        <MudText Typo="Typo.h4">Új igaz-hamis kérdés hozzáadása</MudText>
        <EditForm Class="mt-3" Model="@model" OnValidSubmit="Submit">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField For="@(() => model.Text)" @bind-Value="model.Text" T="string" Label="A kérdés szövege" Variant="Variant.Outlined" Lines="2" />
                </MudItem>
                <MudItem xs="2">
                    <MudText Typo="Typo.button" Class="d-flex align-center justify-center mud-width-full py-1">Igaz</MudText>
                </MudItem>
                <MudItem xs="10">
                    <MudText Typo="Typo.button" Class="d-flex align-center justify-center mud-width-full py-1">Szöveg</MudText>
                </MudItem>
            </MudGrid>
            <MudDivider />
            @foreach (var option in options)
            {
                int idx = options.FindIndex(x => x == option);
                <DynamicComponent @ref="options[idx]" Type="@typeof(TrueOrFalseComponent)" />
            }

            <div class="d-flex align-center justify-space-between mt-6">
                <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" Class="mx-auto" OnClick="() => AddNewOption()">Lehetőség hozzáadása</MudButton>
            </div>

            <MudNumericField For="@(() => model.MaxPoints)" @bind-Value="model.MaxPoints" Label="Pontok száma" Format="F1" Variant="Variant.Outlined" />
            <div class="d-flex align-center justify-space-between mt-6">
                <MudCheckBox @bind-Checked="@ChipsEnabled" T="bool" Class="ml-n2" Label="Kérdés megosztása" />
                <MudCheckBox For="@(() => model.CorrectManually)" @bind-Checked="@model.CorrectManually" T="bool" Class="ml-n2" Label="Kézzel javítandó" />
                <MudButton Disabled="@isBusy" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Hozzáadás</MudButton>
            </div>
            @if (ChipsEnabled)
            {
                <div class="d-flex align-center justify-space-between mt-6">
                    <MudTextField @bind-Value="newLabel" Label="Új címke neve" Variant="Variant.Text"></MudTextField>
                    <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="() => AddLabel()"></MudIconButton>
                </div>

                <MudChipSet AllClosable="true" OnClose="Closed">
                    @foreach (var value in labels)
                    {
                        <MudChip Color="Color.Primary" Text="@value.LabelText"></MudChip>
                    }
                </MudChipSet>
            }
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    private QuestionDTO model = new QuestionDTO();
    private bool chipsEnabled;
    private bool isBusy;
    private string newLabel;
    private Type type = Type.GetType("TrueOrFalseComponent");
    List<LabelDTO> labels = new List<LabelDTO>();
    List<DynamicComponent> options = new List<DynamicComponent>() { new DynamicComponent() };

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    bool ChipsEnabled { get { return chipsEnabled; } set { chipsEnabled = value; labels = new List<LabelDTO>(); StateHasChanged(); } }

    public void AddLabel()
    {
        labels.Add(new LabelDTO() { LabelText = newLabel });
        newLabel = "";
    }

    public void Closed(MudChip chip) => labels.Remove(labels.FirstOrDefault(x => x.LabelText == chip.Text));

    private void AddNewOption()
    {
        options.Add(new DynamicComponent());
    }

    async void Submit()
    {
        isBusy = true;
        if (labels.Count > 0)
        {
            model.Labels = labels;
        }

        model.QuestionType = "TrueOrFalse";
        model.IsShared = chipsEnabled;
        model.CorrectAnswer = GenerateCorrectAnswerString();

        var userState = authenticationState.Result;
        questionService.AccessToken = userState.User.FindFirst("AccessToken").Value;
        if (await questionService.AddQuestionAsync(model))
        {
            Snackbar.Add("Kérdés sikeresen hozzáadva!", Severity.Success);
            _navManager.NavigateTo(_pageState.PreviousPage());
        }
        else
        {
            Snackbar.Add("Hiba történt!", Severity.Success);
            isBusy = false;
        }
    }

    private string GenerateCorrectAnswerString()
    {
        List<Tuple<bool, string>> itemsToSerialize = new List<Tuple<bool, string>>();

        foreach (var item in options)
        {
            var option = item.Instance as TrueOrFalseComponent;
            itemsToSerialize.Add(Tuple.Create(option.isChecked, option.text));
        }

        itemsToSerialize.Sort((x, y) => y.Item2.CompareTo(x.Item2));
        return JsonSerializer.Serialize(itemsToSerialize, JsonHelpers.GetSerializerOption());
    }
}

