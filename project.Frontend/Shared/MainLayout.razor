@using System.Security.Claims
@inherits LayoutComponentBase
@attribute [Authorize]

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<div class="page">
    <MudLayout>
        <MudAppBar Elevation="1" Dense="true" Class="teal darken-1">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
            <MudSpacer />
            <UserStatus />
        </MudAppBar>
        <MudDrawer @bind-Open="@open" ClipMode="DrawerClipMode.Docked" Elevation="1" Variant="@DrawerVariant.Responsive">
            <MudDrawerHeader>
                <MudText Typo="Typo.h6">OExam</MudText>
            </MudDrawerHeader>
            <MudNavMenu>
                @if (isAdmin)
                {
                    <MudNavLink Href="/users" Match="NavLinkMatch.All">Admin felület</MudNavLink>
                }
                <MudNavLink Href="/courses" Match="NavLinkMatch.All">Kurzusok</MudNavLink>
                @if (isTeacher || isAdmin)
                {
                    <MudNavLink Href="/questions" Match="NavLinkMatch.All">Kérdésbank</MudNavLink>
                }
                @if (isTeacher || isAdmin)
                {
                    <MudNavLink Href="/QuestionEditor" Match="NavLinkMatch.All">Kérdések szerkesztése</MudNavLink>
                }
            </MudNavMenu>
        </MudDrawer>
        <MudMainContent Class="pt-16 px-16">
            <MudContainer Class="mt-6">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudLayout>
    @code {
        bool open = false;
        bool isAdmin = false;
        bool isTeacher = false;

        [CascadingParameter]
        private Task<AuthenticationState> authenticationState { get; set; }

        void ToggleDrawer()
        {
            open = !open;
        }

        protected async override Task OnInitializedAsync()
        {
            base.OnInitialized();
            var state = await authenticationState;
            var user = state.User.FindFirst(ClaimTypes.Role)?.Value;
            switch (user)
            {
                case "Admin": isAdmin = true; break;
                case "Teacher": isTeacher = true; break;
                default: break;
            }
        }
    }
</div>
